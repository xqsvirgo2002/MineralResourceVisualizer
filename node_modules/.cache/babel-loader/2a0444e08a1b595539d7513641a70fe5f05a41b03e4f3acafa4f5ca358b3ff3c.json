{"ast":null,"code":"import * as echarts from 'echarts';\nexport default {\n  name: 'GlobalMineralProduction',\n  data() {\n    return {\n      chartInstance: null,\n      chartData: null\n    };\n  },\n  mounted() {\n    this.loadChartData();\n  },\n  methods: {\n    loadChartData() {\n      import('@/assets/output.json').then(data => {\n        this.chartData = data.default;\n        this.initChart();\n      });\n    },\n    initChart() {\n      const chartDom = this.$refs.GlobalMineralProduction;\n      this.chartInstance = echarts.init(chartDom);\n      const options = {\n        title: {\n          text: '全球矿产产量按国家分布',\n          left: 'center'\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'shadow'\n          },\n          formatter: function (params) {\n            let content = '<table>';\n            content += '<tr><td>' + params[0].axisValue + '</td></tr>'; // 第一列的内容\n            params.forEach(function (item) {\n              content += '<tr><td>' + item.seriesName + '</td><td>' + item.value + '</td></tr>'; // 每行的第二和第三列\n            });\n            content += '</table>';\n            return content;\n          }\n        },\n        legend: {\n          data: Object.keys(this.chartData),\n          orient: 'horizontal',\n          top: 450\n        },\n        xAxis: {\n          type: 'category',\n          data: this.getCategories()\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: this.getSeriesData()\n      };\n      this.chartInstance.setOption(options);\n    },\n    getCategories() {\n      const firstSheetData = this.chartData[Object.keys(this.chartData)[0]];\n      return firstSheetData.map(item => item.Country);\n    },\n    getSeriesData() {\n      return Object.keys(this.chartData).map(sheetName => ({\n        name: sheetName,\n        type: 'bar',\n        stack: 'total',\n        data: this.chartData[sheetName].map(item => item['2021'])\n      }));\n    }\n  }\n};","map":{"version":3,"names":["echarts","name","data","chartInstance","chartData","mounted","loadChartData","methods","then","default","initChart","chartDom","$refs","GlobalMineralProduction","init","options","title","text","left","tooltip","trigger","axisPointer","type","formatter","params","content","axisValue","forEach","item","seriesName","value","legend","Object","keys","orient","top","xAxis","getCategories","yAxis","series","getSeriesData","setOption","firstSheetData","map","Country","sheetName","stack"],"sources":["src/components/GlobalMineralProduction.vue"],"sourcesContent":["<!-- <template>\n    <div class=\"chart-container\">\n        <h1>全球矿产产量按国家分布</h1>\n        <div ref=\"GlobalMineralProduction\" class=\"chart\"></div>\n        <div class=\"chart-description\">\n            此图表展示了代表性国家在近年来不同矿产的生产量。可以明显看出，中国在多种矿产，特别是铁矿石和铝土矿的生产量中占据全球领先地位。这反映了中国作为全球工业和建设重心的角色。与此同时，其他国家如澳大利亚和南非在特定矿产如铝和钴的生产上也显示出了它们的重要性。这些数据不仅展示了矿产资源的全球分布，还揭示了资源开发与国家工业能力之间的紧密联系。通过分析这些变化，投资者和政策制定者可以更好地理解全球资源市场的动态，以及各国在全球经济中的地位。\n          </div>\n    </div>\n</template> -->\n<template>\n    <div>\n        <el-row :gutter=\"20\">\n            <el-col :span=\"24\">\n                <el-card class=\"chart-card\">\n                    <div ref=\"GlobalMineralProduction\" class=\"chart\"></div>\n                </el-card>\n            </el-col>\n        </el-row>\n        <el-row :gutter=\"20\">\n            <el-col :span=\"24\">\n                <el-card class=\"analysis-card\">\n                    <div class=\"analysis-text\">\n                        此图表展示了代表性国家在近年来不同矿产的生产量。可以明显看出，中国在多种矿产，特别是铁矿石和铝土矿的生产量中占据全球领先地位。这反映了中国作为全球工业和建设重心的角色。与此同时，其他国家如澳大利亚和南非在特定矿产如铝和钴的生产上也显示出了它们的重要性。这些数据不仅展示了矿产资源的全球分布，还揭示了资源开发与国家工业能力之间的紧密联系。通过分析这些变化，投资者和政策制定者可以更好地理解全球资源市场的动态，以及各国在全球经济中的地位。\n                    </div>\n                </el-card>\n            </el-col>\n        </el-row>\n    </div>\n</template>\n  \n<script>\nimport * as echarts from 'echarts';\n\nexport default {\n    name: 'GlobalMineralProduction',\n    data() {\n        return {\n            chartInstance: null,\n            chartData: null\n        };\n    },\n    mounted() {\n        this.loadChartData();\n    },\n    methods: {\n        loadChartData() {\n            import('@/assets/output.json').then(data => {\n                this.chartData = data.default;\n                this.initChart();\n            });\n        },\n        initChart() {\n            const chartDom = this.$refs.GlobalMineralProduction;\n            this.chartInstance = echarts.init(chartDom);\n\n            const options = {\n                title: {\n                    text: '全球矿产产量按国家分布',\n                    left: 'center'\n                },\n                tooltip: {\n                    trigger: 'axis',\n                    axisPointer: {\n                        type: 'shadow'\n                    },\n                    formatter: function (params) {\n                        let content = '<table>';\n                        content += '<tr><td>' + params[0].axisValue + '</td></tr>'; // 第一列的内容\n                        params.forEach(function (item) {\n                            content += '<tr><td>' + item.seriesName + '</td><td>' + item.value + '</td></tr>'; // 每行的第二和第三列\n                        });\n                        content += '</table>';\n                        return content;\n                    }\n                },\n                legend: {\n                    data: Object.keys(this.chartData),\n                    orient: 'horizontal',\n                    top: 450\n                },\n                xAxis: {\n                    type: 'category',\n                    data: this.getCategories()\n                },\n                yAxis: {\n                    type: 'value'\n                },\n                series: this.getSeriesData()\n            };\n\n            this.chartInstance.setOption(options);\n        },\n        getCategories() {\n            const firstSheetData = this.chartData[Object.keys(this.chartData)[0]];\n            return firstSheetData.map(item => item.Country);\n        },\n        getSeriesData() {\n            return Object.keys(this.chartData).map(sheetName => ({\n                name: sheetName,\n                type: 'bar',\n                stack: 'total',\n                data: this.chartData[sheetName].map(item => item['2021'])\n            }));\n        }\n    }\n};\n</script>\n  \n<style scoped>\n.chart-container {\n    padding: 50px;\n    height: 1000px;\n    /* 设置图表容器的高度为700像素 */\n}\n\n.chart {\n    width: 100%;\n    height: 500px;\n    /* 图表高度为500像素 */\n    margin-top: 20px;\n}\n\n.analysis-card {\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\n  margin-top: 20px;\n  padding: 20px;\n  background-color: #f7f7f7;\n}\n\n.analysis-text {\n  font-size: 16px; /* 增大字号 */\n  line-height: 1.8;\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; /* 更换为可读性强的字体 */\n  text-align: justify;\n}\n</style>"],"mappings":"AA+BA,YAAAA,OAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,aAAA;MACAC,SAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,aAAA;EACA;EACAC,OAAA;IACAD,cAAA;MACA,+BAAAE,IAAA,CAAAN,IAAA;QACA,KAAAE,SAAA,GAAAF,IAAA,CAAAO,OAAA;QACA,KAAAC,SAAA;MACA;IACA;IACAA,UAAA;MACA,MAAAC,QAAA,QAAAC,KAAA,CAAAC,uBAAA;MACA,KAAAV,aAAA,GAAAH,OAAA,CAAAc,IAAA,CAAAH,QAAA;MAEA,MAAAI,OAAA;QACAC,KAAA;UACAC,IAAA;UACAC,IAAA;QACA;QACAC,OAAA;UACAC,OAAA;UACAC,WAAA;YACAC,IAAA;UACA;UACAC,SAAA,WAAAA,CAAAC,MAAA;YACA,IAAAC,OAAA;YACAA,OAAA,iBAAAD,MAAA,IAAAE,SAAA;YACAF,MAAA,CAAAG,OAAA,WAAAC,IAAA;cACAH,OAAA,iBAAAG,IAAA,CAAAC,UAAA,iBAAAD,IAAA,CAAAE,KAAA;YACA;YACAL,OAAA;YACA,OAAAA,OAAA;UACA;QACA;QACAM,MAAA;UACA7B,IAAA,EAAA8B,MAAA,CAAAC,IAAA,MAAA7B,SAAA;UACA8B,MAAA;UACAC,GAAA;QACA;QACAC,KAAA;UACAd,IAAA;UACApB,IAAA,OAAAmC,aAAA;QACA;QACAC,KAAA;UACAhB,IAAA;QACA;QACAiB,MAAA,OAAAC,aAAA;MACA;MAEA,KAAArC,aAAA,CAAAsC,SAAA,CAAA1B,OAAA;IACA;IACAsB,cAAA;MACA,MAAAK,cAAA,QAAAtC,SAAA,CAAA4B,MAAA,CAAAC,IAAA,MAAA7B,SAAA;MACA,OAAAsC,cAAA,CAAAC,GAAA,CAAAf,IAAA,IAAAA,IAAA,CAAAgB,OAAA;IACA;IACAJ,cAAA;MACA,OAAAR,MAAA,CAAAC,IAAA,MAAA7B,SAAA,EAAAuC,GAAA,CAAAE,SAAA;QACA5C,IAAA,EAAA4C,SAAA;QACAvB,IAAA;QACAwB,KAAA;QACA5C,IAAA,OAAAE,SAAA,CAAAyC,SAAA,EAAAF,GAAA,CAAAf,IAAA,IAAAA,IAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
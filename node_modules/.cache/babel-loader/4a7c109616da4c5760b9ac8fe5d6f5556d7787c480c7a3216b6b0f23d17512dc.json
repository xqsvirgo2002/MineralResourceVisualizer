{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as echarts from 'echarts';\nexport default {\n  name: 'GlobalMineralHeatmap',\n  data() {\n    return {\n      heatmapInstance: null,\n      heatmapData: null\n    };\n  },\n  mounted() {\n    this.loadHeatmapData();\n  },\n  methods: {\n    loadHeatmapData() {\n      import('@/assets/output.json').then(data => {\n        this.heatmapData = this.processDataForHeatmap(data.default);\n        this.initHeatmap();\n      });\n    },\n    processDataForHeatmap(data) {\n      let heatmapData = [];\n      Object.keys(data).forEach((mineral, idx) => {\n        data[mineral].forEach(countryData => {\n          heatmapData.push([countryData.Country, idx, countryData['2021']]);\n        });\n      });\n      return heatmapData;\n    },\n    initHeatmap() {\n      const heatmapDom = this.$refs.GlobalMineralHeatmap;\n      this.heatmapInstance = echarts.init(heatmapDom);\n      const options = {\n        title: {\n          text: '全球矿产产量热力图',\n          left: 'center'\n        },\n        tooltip: {\n          position: 'top'\n        },\n        grid: {\n          height: '50%',\n          top: '10%'\n        },\n        xAxis: {\n          type: 'category',\n          data: Object.keys(this.heatmapData[0])\n        },\n        yAxis: {\n          type: 'category',\n          data: Object.keys(this.heatmapData)\n        },\n        visualMap: {\n          min: 0,\n          max: 1000,\n          // This should be set to the maximum value in your dataset\n          calculable: true,\n          orient: 'horizontal',\n          left: 'center',\n          bottom: '15%'\n        },\n        series: [{\n          name: '矿产产量',\n          type: 'heatmap',\n          data: this.heatmapData,\n          label: {\n            show: true\n          },\n          emphasis: {\n            itemStyle: {\n              shadowBlur: 10,\n              shadowColor: 'rgba(0, 0, 0, 0.5)'\n            }\n          }\n        }]\n      };\n      this.heatmapInstance.setOption(options);\n    }\n  }\n};","map":{"version":3,"names":["echarts","name","data","heatmapInstance","heatmapData","mounted","loadHeatmapData","methods","then","processDataForHeatmap","default","initHeatmap","Object","keys","forEach","mineral","idx","countryData","push","Country","heatmapDom","$refs","GlobalMineralHeatmap","init","options","title","text","left","tooltip","position","grid","height","top","xAxis","type","yAxis","visualMap","min","max","calculable","orient","bottom","series","label","show","emphasis","itemStyle","shadowBlur","shadowColor","setOption"],"sources":["src/components/GlobalMineralHeatMap.vue"],"sourcesContent":["<template>\n    <div>\n        <el-row :gutter=\"20\">\n            <el-col :span=\"24\">\n                <el-card class=\"chart-card\">\n                    <div ref=\"GlobalMineralHeatmap\" class=\"chart\"></div>\n                </el-card>\n            </el-col>\n        </el-row>\n        <!-- Analysis text can be added here later -->\n    </div>\n</template>\n\n<script>\nimport * as echarts from 'echarts';\n\nexport default {\n    name: 'GlobalMineralHeatmap',\n    data() {\n        return {\n            heatmapInstance: null,\n            heatmapData: null\n        };\n    },\n    mounted() {\n        this.loadHeatmapData();\n    },\n    methods: {\n        loadHeatmapData() {\n            import('@/assets/output.json').then(data => {\n                this.heatmapData = this.processDataForHeatmap(data.default);\n                this.initHeatmap();\n            });\n        },\n        processDataForHeatmap(data) {\n            let heatmapData = [];\n            Object.keys(data).forEach((mineral, idx) => {\n                data[mineral].forEach((countryData) => {\n                    heatmapData.push([countryData.Country, idx, countryData['2021']]);\n                });\n            });\n            return heatmapData;\n        },\n        initHeatmap() {\n            const heatmapDom = this.$refs.GlobalMineralHeatmap;\n            this.heatmapInstance = echarts.init(heatmapDom);\n\n            const options = {\n                title: {\n                    text: '全球矿产产量热力图',\n                    left: 'center'\n                },\n                tooltip: {\n                    position: 'top'\n                },\n                grid: {\n                    height: '50%',\n                    top: '10%'\n                },\n                xAxis: {\n                    type: 'category',\n                    data: Object.keys(this.heatmapData[0])\n                },\n                yAxis: {\n                    type: 'category',\n                    data: Object.keys(this.heatmapData)\n                },\n                visualMap: {\n                    min: 0,\n                    max: 1000, // This should be set to the maximum value in your dataset\n                    calculable: true,\n                    orient: 'horizontal',\n                    left: 'center',\n                    bottom: '15%'\n                },\n                series: [{\n                    name: '矿产产量',\n                    type: 'heatmap',\n                    data: this.heatmapData,\n                    label: {\n                        show: true\n                    },\n                    emphasis: {\n                        itemStyle: {\n                            shadowBlur: 10,\n                            shadowColor: 'rgba(0, 0, 0, 0.5)'\n                        }\n                    }\n                }]\n            };\n\n            this.heatmapInstance.setOption(options);\n        }\n    }\n};\n</script>\n\n<style scoped>\n/* Add your custom styles here */\n.chart {\n    width: 100%;\n    height: 700px; /* Adjusted for heatmap */\n    margin-top: 20px;\n}\n</style>\n"],"mappings":";AAcA,YAAAA,OAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,eAAA;MACAC,WAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,eAAA;EACA;EACAC,OAAA;IACAD,gBAAA;MACA,+BAAAE,IAAA,CAAAN,IAAA;QACA,KAAAE,WAAA,QAAAK,qBAAA,CAAAP,IAAA,CAAAQ,OAAA;QACA,KAAAC,WAAA;MACA;IACA;IACAF,sBAAAP,IAAA;MACA,IAAAE,WAAA;MACAQ,MAAA,CAAAC,IAAA,CAAAX,IAAA,EAAAY,OAAA,EAAAC,OAAA,EAAAC,GAAA;QACAd,IAAA,CAAAa,OAAA,EAAAD,OAAA,CAAAG,WAAA;UACAb,WAAA,CAAAc,IAAA,EAAAD,WAAA,CAAAE,OAAA,EAAAH,GAAA,EAAAC,WAAA;QACA;MACA;MACA,OAAAb,WAAA;IACA;IACAO,YAAA;MACA,MAAAS,UAAA,QAAAC,KAAA,CAAAC,oBAAA;MACA,KAAAnB,eAAA,GAAAH,OAAA,CAAAuB,IAAA,CAAAH,UAAA;MAEA,MAAAI,OAAA;QACAC,KAAA;UACAC,IAAA;UACAC,IAAA;QACA;QACAC,OAAA;UACAC,QAAA;QACA;QACAC,IAAA;UACAC,MAAA;UACAC,GAAA;QACA;QACAC,KAAA;UACAC,IAAA;UACAhC,IAAA,EAAAU,MAAA,CAAAC,IAAA,MAAAT,WAAA;QACA;QACA+B,KAAA;UACAD,IAAA;UACAhC,IAAA,EAAAU,MAAA,CAAAC,IAAA,MAAAT,WAAA;QACA;QACAgC,SAAA;UACAC,GAAA;UACAC,GAAA;UAAA;UACAC,UAAA;UACAC,MAAA;UACAb,IAAA;UACAc,MAAA;QACA;QACAC,MAAA;UACAzC,IAAA;UACAiC,IAAA;UACAhC,IAAA,OAAAE,WAAA;UACAuC,KAAA;YACAC,IAAA;UACA;UACAC,QAAA;YACAC,SAAA;cACAC,UAAA;cACAC,WAAA;YACA;UACA;QACA;MACA;MAEA,KAAA7C,eAAA,CAAA8C,SAAA,CAAAzB,OAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
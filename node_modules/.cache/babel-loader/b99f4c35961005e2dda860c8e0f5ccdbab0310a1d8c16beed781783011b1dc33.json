{"ast":null,"code":"import * as echarts from 'echarts';\nexport default {\n  name: 'GlobalMineralProduction',\n  data() {\n    return {\n      chartInstance: null,\n      chartData: null\n    };\n  },\n  mounted() {\n    this.loadChartData();\n  },\n  methods: {\n    loadChartData() {\n      import('@/assets/output.json').then(data => {\n        this.chartData = data.default;\n        this.initChart();\n      });\n    },\n    initChart() {\n      const chartDom = this.$refs.GlobalMineralProduction;\n      this.chartInstance = echarts.init(chartDom);\n      const options = {\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'shadow'\n          }\n        },\n        legend: {\n          data: Object.keys(this.chartData),\n          orient: 'horizontal',\n          top: 450\n        },\n        xAxis: {\n          type: 'category',\n          data: this.getCategories()\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: this.getSeriesData()\n      };\n      this.chartInstance.setOption(options);\n    },\n    getCategories() {\n      const firstSheetData = this.chartData[Object.keys(this.chartData)[0]];\n      return firstSheetData.map(item => item.Country);\n    },\n    getSeriesData() {\n      return Object.keys(this.chartData).map(sheetName => ({\n        name: sheetName,\n        type: 'bar',\n        stack: 'total',\n        data: this.chartData[sheetName].map(item => item['2021'])\n      }));\n    }\n  }\n};","map":{"version":3,"names":["echarts","name","data","chartInstance","chartData","mounted","loadChartData","methods","then","default","initChart","chartDom","$refs","GlobalMineralProduction","init","options","tooltip","trigger","axisPointer","type","legend","Object","keys","orient","top","xAxis","getCategories","yAxis","series","getSeriesData","setOption","firstSheetData","map","item","Country","sheetName","stack"],"sources":["src/components/GlobalMineralProduction.vue"],"sourcesContent":["<template>\n    <div class=\"chart-container\">\n      <h1>Global Mineral Production</h1>\n      <div ref=\"GlobalMineralProduction\" class=\"chart\"></div>\n    </div>\n  </template>\n  \n  <script>\n  import * as echarts from 'echarts';\n  \n  export default {\n    name: 'GlobalMineralProduction',\n    data() {\n      return {\n        chartInstance: null,\n        chartData: null\n      };\n    },\n    mounted() {\n      this.loadChartData();\n    },\n    methods: {\n      loadChartData() {\n        import('@/assets/output.json').then(data => {\n          this.chartData = data.default;\n          this.initChart();\n        });\n      },\n      initChart() {\n        const chartDom = this.$refs.GlobalMineralProduction;\n        this.chartInstance = echarts.init(chartDom);\n  \n        const options = {\n            tooltip: {\n            trigger: 'axis',\n            axisPointer: {\n              type: 'shadow'\n            }\n        },\n          legend: {\n            data: Object.keys(this.chartData),\n            orient: 'horizontal',\n            top: 450\n          },\n          xAxis: {\n            type: 'category',\n            data: this.getCategories()\n          },\n          yAxis: {\n            type: 'value'\n          },\n          series: this.getSeriesData()\n        };\n  \n        this.chartInstance.setOption(options);\n      },\n      getCategories() {\n        const firstSheetData = this.chartData[Object.keys(this.chartData)[0]];\n        return firstSheetData.map(item => item.Country);\n      },\n      getSeriesData() {\n        return Object.keys(this.chartData).map(sheetName => ({\n          name: sheetName,\n          type: 'bar',\n          stack: 'total',\n          data: this.chartData[sheetName].map(item => item['2021'])\n        }));\n      }\n    }\n  };\n  </script>\n  \n  <style scoped>\n .chart-container {\n  padding: 200px;\n  height: 700px; /* 设置图表容器的高度为700像素 */\n}\n\n.chart {\n  width: 100%;\n  height: 500px; /* 图表高度为500像素 */\n  margin-top: 20px;\n}\n  </style>"],"mappings":"AAQA,YAAAA,OAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,aAAA;MACAC,SAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,aAAA;EACA;EACAC,OAAA;IACAD,cAAA;MACA,+BAAAE,IAAA,CAAAN,IAAA;QACA,KAAAE,SAAA,GAAAF,IAAA,CAAAO,OAAA;QACA,KAAAC,SAAA;MACA;IACA;IACAA,UAAA;MACA,MAAAC,QAAA,QAAAC,KAAA,CAAAC,uBAAA;MACA,KAAAV,aAAA,GAAAH,OAAA,CAAAc,IAAA,CAAAH,QAAA;MAEA,MAAAI,OAAA;QACAC,OAAA;UACAC,OAAA;UACAC,WAAA;YACAC,IAAA;UACA;QACA;QACAC,MAAA;UACAlB,IAAA,EAAAmB,MAAA,CAAAC,IAAA,MAAAlB,SAAA;UACAmB,MAAA;UACAC,GAAA;QACA;QACAC,KAAA;UACAN,IAAA;UACAjB,IAAA,OAAAwB,aAAA;QACA;QACAC,KAAA;UACAR,IAAA;QACA;QACAS,MAAA,OAAAC,aAAA;MACA;MAEA,KAAA1B,aAAA,CAAA2B,SAAA,CAAAf,OAAA;IACA;IACAW,cAAA;MACA,MAAAK,cAAA,QAAA3B,SAAA,CAAAiB,MAAA,CAAAC,IAAA,MAAAlB,SAAA;MACA,OAAA2B,cAAA,CAAAC,GAAA,CAAAC,IAAA,IAAAA,IAAA,CAAAC,OAAA;IACA;IACAL,cAAA;MACA,OAAAR,MAAA,CAAAC,IAAA,MAAAlB,SAAA,EAAA4B,GAAA,CAAAG,SAAA;QACAlC,IAAA,EAAAkC,SAAA;QACAhB,IAAA;QACAiB,KAAA;QACAlC,IAAA,OAAAE,SAAA,CAAA+B,SAAA,EAAAH,GAAA,CAAAC,IAAA,IAAAA,IAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}